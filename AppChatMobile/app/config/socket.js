import { Platform } from "react-native";
import { io } from "socket.io-client";
import AsyncStorage from "@react-native-async-storage/async-storage";

const getServerURL = () => {
  if (Platform.OS === "android") {
    return "http://10.0.2.2:3000"; // Android Emulator
  }
  return "http://192.168.1.11:3000"; // iOS ho·∫∑c thi·∫øt b·ªã th·ª±c
};

const socket = io(getServerURL(), {
  transports: ["websocket"],
  forceNew: false, // Thay v√¨ true ƒë·ªÉ duy tr√¨ k·∫øt n·ªëi ·ªïn ƒë·ªãnh
  autoConnect: false, // Kh√¥ng t·ª± ƒë·ªông k·∫øt n·ªëi, ch·ªù x√°c th·ª±c
});

// H√†m ƒë·ªÉ kh·ªüi t·∫°o socket v·ªõi token
const initializeSocket = async () => {
  try {
    const token = await AsyncStorage.getItem("token");
    if (!token) {
      console.log("‚ùå Kh√¥ng t√¨m th·∫•y token, kh√¥ng th·ªÉ kh·ªüi t·∫°o socket");
      return;
    }
    const parsedToken = JSON.parse(token);

    socket.auth = { token: parsedToken.token }; // G·ª≠i token khi k·∫øt n·ªëi
    socket.connect(); // K√≠ch ho·∫°t k·∫øt n·ªëi

    socket.on("connect", () => {
      console.log("üì° ƒê√£ k·∫øt n·ªëi ƒë·∫øn socket server v·ªõi ID:", socket.id);
    });

    socket.on("connect_error", (err) => {
      console.log("‚ùå L·ªói k·∫øt n·ªëi socket:", err.message);
    });
  } catch (error) {
    console.error("L·ªói kh·ªüi t·∫°o socket:", error);
  }
};

// G·ªçi h√†m kh·ªüi t·∫°o khi ·ª©ng d·ª•ng kh·ªüi ƒë·ªông
initializeSocket();

export default socket;