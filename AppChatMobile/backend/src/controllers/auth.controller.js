const User = require("../models/user.model");
const bcrypt = require("bcryptjs");
const cloudinary = require("../config/cloudinary");
const generateToken = require("../config/utils");
const { client, serviceSid } = require("../config/twilio");
const jwt = require('jsonwebtoken');
// üìå 1. G·ª≠i OTP t·ªõi s·ªë ƒëi·ªán tho·∫°i ƒëƒÉng k√Ω
const sendSignupOTP = async (req, res) => {
  const { phone } = req.body;

  if (!phone) {
    return res.status(400).json({ message: "Thi·∫øu s·ªë ƒëi·ªán tho·∫°i!" });
  }
  // ƒê·ªãnh d·∫°ng s·ªë ƒëi·ªán tho·∫°i: b·ªè s·ªë 0 ƒë·∫ßu, th√™m +84
  if (!phone.startsWith("+")) {
    phone = `+84${phone.replace(/^0/, "")}`;
  }
  try {
    await client.verify.v2
      .services(serviceSid)
      .verifications.create({ to: phone, channel: "sms" });

    res.status(200).json({ success: true, message: "ƒê√£ g·ª≠i m√£ OTP." });
  } catch (err) {
    console.error("L·ªói g·ª≠i OTP:", err.message);
    res.status(500).json({ success: false, message: "Kh√¥ng th·ªÉ g·ª≠i OTP." });
  }
};

// üìå 2. X√°c minh OTP v√† t·∫°o t√†i kho·∫£n
const verifyAndSignup = async (req, res) => {
  const { phone, code, name, email, password, dob, gender, avatar } = req.body;

  if (!phone || !code || !name || !email || !password) {
    return res.status(400).json({ message: "Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc" });
  }

  try {
    // ‚úÖ X√°c minh OTP
    const check = await client.verify.v2
      .services(serviceSid)
      .verificationChecks.create({ to: phone, code });

    if (check.status !== "approved") {
      return res
        .status(400)
        .json({ message: "OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n" });
    }

    // ‚úÖ Ki·ªÉm tra t√†i kho·∫£n ƒë√£ t·ªìn t·∫°i
    const existingPhone = await User.findOne({ phone });
    const existingEmail = await User.findOne({ email });

    if (existingPhone || existingEmail) {
      return res
        .status(400)
        .json({ message: "Email ho·∫∑c s·ªë ƒëi·ªán tho·∫°i ƒë√£ t·ªìn t·∫°i" });
    }

    // ‚úÖ Upload avatar n·∫øu c√≥
    let uploadedAvatar = "";
    if (avatar) {
      const uploadResponse = await cloudinary.uploader.upload(avatar);
      uploadedAvatar = uploadResponse.secure_url;
    }

    // ‚úÖ T·∫°o t√†i kho·∫£n m·ªõi
    const hashedPassword = await bcrypt.hash(password, 10);

    const newUser = await User.create({
      name,
      email,
      phone,
      password: hashedPassword,
      avatar: uploadedAvatar,
      dob,
      gender,
    });

    // ‚úÖ Sinh JWT v√† tr·∫£ v·ªÅ d·ªØ li·ªáu
    const clientType = req.headers["x-client-type"] || "mobile";
    const token = generateToken(newUser._id, res, clientType);

    const userData = {
      _id: newUser._id,
      name: newUser.name,
      email: newUser.email,
      phone: newUser.phone,
      avatar: newUser.avatar,
      dob: newUser.dob,
      gender: newUser.gender,
      createAt: newUser.createAt,
    };

    if (clientType === "web") {
      return res
        .status(201)
        .json({ message: "ƒêƒÉng k√Ω th√†nh c√¥ng (Web)", user: userData });
    } else {
      return res.status(201).json({
        message: "ƒêƒÉng k√Ω th√†nh c√¥ng (Mobile)",
        token,
        user: userData,
      });
    }
  } catch (err) {
    console.error("L·ªói x√°c minh v√† ƒëƒÉng k√Ω:", err.message);
    return res
      .status(500)
      .json({ message: "L·ªói m√°y ch·ªß khi x√°c minh OTP v√† t·∫°o t√†i kho·∫£n" });
  }
};

// üìå ƒêƒÉng nh·∫≠p
// üìå ƒêƒÉng nh·∫≠p
const login = async (req, res) => {
  const { phone, password } = req.body;

  try {
    if (!phone || !password) {
      return res
        .status(400)
        .json({ message: "Vui l√≤ng ƒëi·ªÅn s·ªë ƒëi·ªán tho·∫°i v√† m·∫≠t kh·∫©u" });
    }

    // ƒê·ªãnh d·∫°ng s·ªë ƒëi·ªán tho·∫°i n·∫øu c·∫ßn
    let formattedPhone = phone;
    if (!phone.startsWith("+")) {
      formattedPhone = `+84${phone.replace(/^0/, "")}`;
    }

    const user = await User.findOne({ phone: formattedPhone });
    if (!user)
      return res.status(401).json({ message: "S·ªë ƒëi·ªán tho·∫°i kh√¥ng t·ªìn t·∫°i" });

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch)
      return res.status(401).json({ message: "M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng" });

    const clientType = req.headers["x-client-type"] || "mobile";
    const token = generateToken(user._id, res, clientType);

    const userData = {
      _id: user._id,
      name: user.name,
      email: user.email,
      phone: user.phone,
      avatar: user.avatar,
      dob: user.dob,
      gender: user.gender,
      createAt: user.createAt,
    };

    // Tr·∫£ v·ªÅ token cho c·∫£ web v√† mobile
    res.status(200).json({
      message: `ƒêƒÉng nh·∫≠p th√†nh c√¥ng (${clientType})`,
      token,
      user: userData,
    });
  } catch (error) {
    console.error("L·ªói ƒëƒÉng nh·∫≠p:", error); // Th√™m log ƒë·ªÉ debug
    res.status(500).json({ message: "L·ªói m√°y ch·ªß khi ƒëƒÉng nh·∫≠p" });
  }
};

// üìå ƒêƒÉng xu·∫•t (n·∫øu d√πng cookie cho web)
const logout = (req, res) => {
  res
    .clearCookie("token")
    .status(200)
    .json({ message: "ƒêƒÉng xu·∫•t th√†nh c√¥ng" });
};

// üìå C·∫≠p nh·∫≠t h·ªì s∆°
const updateProfile = async (req, res) => {
  const user = req.user;
  const { name, phone, dob, gender, avatar } = req.body;

  try {
    if (phone && phone !== user.phone) {
      const existingPhone = await User.findOne({ phone });
      if (existingPhone) {
        return res.status(400).json({ message: "S·ªë ƒëi·ªán tho·∫°i ƒë√£ t·ªìn t·∫°i" });
      }
    }

    if (avatar) {
      const uploadResponse = await cloudinary.uploader.upload(avatar);
      user.avatar = uploadResponse.secure_url;
    }

    user.name = name || user.name;
    user.phone = phone || user.phone;
    user.dob = dob || user.dob;
    user.gender = gender || user.gender;

    await user.save();
    res.status(200).json({ message: "C·∫≠p nh·∫≠t th√†nh c√¥ng", user });

  } catch (error) {
    res.status(500).json({ message: "L·ªói m√°y ch·ªß khi c·∫≠p nh·∫≠t h·ªì s∆°" });
  }
};
const updateUserImg = async (req, res) => {
  try {
    const { name, email, phone, dob, gender, avatar } = req.body;
    const userId = req.user._id;
    const updateFields = {};
    if (name !== undefined) updateFields.name = name;
    if (email !== undefined) updateFields.email = email;
    if (phone !== undefined) updateFields.phone = phone;
    if (dob !== undefined) updateFields.dob = dob;
    if (gender !== undefined) updateFields.gender = gender;
    if (avatar !== undefined) updateFields.avatar = avatar;
    const updateUser = await User.findByIdAndUpdate(userId, updateFields, {
      new: true,
    });
    if (!updateUser) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng." });
    }
    res.status(200).json(updateUser);
  } catch (error) {
    console.error("L·ªói c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng:", error.message);
    res.status(500).json({ message: "ƒê√£ x·∫£y ra l·ªói khi c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng." });
  }
};

// üìå Ki·ªÉm tra ng∆∞·ªùi d√πng ƒëang ƒëƒÉng nh·∫≠p
const checkAuth = async (req, res) => {
  const user = req.user;
  if (!user) return res.status(401).json({ message: "Kh√¥ng x√°c th·ª±c ƒë∆∞·ª£c ng∆∞·ªùi d√πng" });

  res.status(200).json({
    _id: user._id,
    name: user.name,
    email: user.email,
    phone: user.phone,
    avatar: user.avatar,
    dob: user.dob,
    gender: user.gender,
    createAt: user.createAt,
  });
};

const findByPhone = async (req, res) => {
  const { phone } = req.body;

  try {
    const user = await User.findOne({ phone });

    if (!user) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
    }

    return res.status(200).json({
      id: user._id,
      name: user.name,
      avatar: user.avatar,
      phone: user.phone,
      email: user.email,
      dob: user.dob,
      gender: user.gender,
    });
  } catch (error) {
    console.error("L·ªói t√¨m ng∆∞·ªùi d√πng:", error.message);
    return res.status(500).json({ message: "L·ªói server" });
  }
};

//send otp quen mk 
const sendForgotPasswordOTP = async (req, res) => {
  let { phone } = req.body;

  if (!phone) {
    return res.status(400).json({ message: "Thi·∫øu s·ªë ƒëi·ªán tho·∫°i!" });
  }

  if (!phone.startsWith("+")) {
    phone = `+84${phone.replace(/^0/, "")}`;
  }

  try {
    const user = await User.findOne({ phone });
    if (!user) {
      return res.status(404).json({ message: "S·ªë ƒëi·ªán tho·∫°i ch∆∞a ƒë∆∞·ª£c ƒëƒÉng k√Ω" });
    }

    await client.verify.v2.services(serviceSid)
      .verifications.create({ to: phone, channel: 'sms' });

    res.status(200).json({ success: true, message: "ƒê√£ g·ª≠i m√£ OTP ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u." });
  } catch (err) {
    console.error("L·ªói g·ª≠i OTP qu√™n m·∫≠t kh·∫©u:", err.message);
    res.status(500).json({ success: false, message: "Kh√¥ng th·ªÉ g·ª≠i OTP." });
  }
};

// Xac thu OTP cho quen MK
// üìå X√°c th·ª±c OTP cho qu√™n m·∫≠t kh·∫©u

const verifyForgotPasswordOTP = async (req, res) => {
  const { phone, code } = req.body;

  if (!phone || !code) {
    return res.status(400).json({ message: "Thi·∫øu s·ªë ƒëi·ªán tho·∫°i ho·∫∑c m√£ OTP" });
  }

  try {
    let formattedPhone = phone;
    if (!phone.startsWith("+")) {
      formattedPhone = `+84${phone.replace(/^0/, "")}`;
    }

    const check = await client.verify.v2.services(serviceSid)
      .verificationChecks.create({ to: formattedPhone, code });

    if (check.status !== 'approved') {
      return res.status(400).json({ message: "M√£ OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n" });
    }

    // T·∫°o resetToken (JWT c√≥ h·∫°n 5 ph√∫t)
    const resetToken = jwt.sign(
      { phone: formattedPhone },
      process.env.JWT_SECRET,
      { expiresIn: '5m' }
    );

    res.status(200).json({
      success: true,
      message: "X√°c minh th√†nh c√¥ng",
      resetToken,
    });
  } catch (err) {
    console.error("L·ªói x√°c minh OTP:", err.message);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß khi x√°c minh OTP" });
  }
};

// ƒë√¥Ãâi m√¢Ã£t kh√¢u
// üìå ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u
const resetPassword = async (req, res) => {
  const { resetToken, newPassword } = req.body;

  if (!resetToken || !newPassword) {
    return res.status(400).json({ message: "Thi·∫øu token ho·∫∑c m·∫≠t kh·∫©u m·ªõi" });
  }

  try {
    const decoded = jwt.verify(resetToken, process.env.JWT_SECRET);
    const phone = decoded.phone;

    const user = await User.findOne({ phone });
    if (!user) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
    }

    const hashedPassword = await bcrypt.hash(newPassword, 10);
    user.password = hashedPassword;
    await user.save();

    res.status(200).json({ message: "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng" });
  } catch (err) {
    console.error("L·ªói ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:", err.message);
    res.status(401).json({ message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n" });
  }
};
const changePassword = async (req, res) => {
  console.log("Body nh·∫≠n ƒë∆∞·ª£c t·ª´ client:", req.body);
  try {
    const { currentPassword, newPassword, confirmPassword } = req.body;

    if (!currentPassword || !newPassword || !confirmPassword) {
      return res.status(400).json({ message: 'Thi·∫øu th√¥ng tin m·∫≠t kh·∫©u' });
    }

    const user = await User.findById(req.user._id).select('+password');
    if (!user || !user.password) {
      return res.status(400).json({ message: 'Kh√¥ng t√¨m th·∫•y m·∫≠t kh·∫©u ng∆∞·ªùi d√πng' });
    }

    const isMatch = await bcrypt.compare(currentPassword, user.password);
    if (!isMatch) {
      return res.status(400).json({ message: 'M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ƒë√∫ng' });
    }

    if (newPassword !== confirmPassword) {
      return res.status(400).json({ message: 'M·∫≠t kh·∫©u m·ªõi v√† x√°c nh·∫≠n m·∫≠t kh·∫©u kh√¥ng kh·ªõp' });
    }

    if (newPassword == currentPassword) {
      return res.status(400).json({ message: 'M·∫≠t kh·∫©u m·ªõi v√† m·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ƒë∆∞·ª£c tr√πng' });
    }

    if (newPassword.length < 6) {
      return res.status(400).json({ message: 'M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±' });
    }

    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(newPassword, salt);
    user.password = hashedPassword;
    await user.save();

    res.status(200).json({ message: 'M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi th√†nh c√¥ng' });
  } catch (error) {
    console.error("L·ªói trong changePassword:", error);
    res.status(500).json({ message: 'L·ªói m√°y ch·ªß' });
  }
};

module.exports = {
  sendSignupOTP,
  verifyAndSignup,
  login,
  logout,
  updateProfile,
  checkAuth,
  findByPhone,
  resetPassword,
  changePassword,
  verifyForgotPasswordOTP,
  sendForgotPasswordOTP,
  updateUserImg,
};
