import { create } from "zustand";
import axiosInstance from "../lib/axios";
import { toast } from "react-hot-toast";

const useAuthStore = create((set) => ({
  authUser: null,
  isSigningUp: false,
  isLoggingIn: false,
  isUpdatingProfile: false,
  isCheckingAuth: true,
  isSendingOTP: false,
  tempSignupData: null,
  tempResetToken: null,

  checkAuth: async () => {
    set({ isCheckingAuth: true });
    try {
      const token = localStorage.getItem("authToken");
      if (!token) {
        set({ authUser: null }); // Kh√¥ng c√≥ token, coi nh∆∞ ch∆∞a ƒëƒÉng nh·∫≠p
        return;
      }

      const res = await axiosInstance.get("/auth/check");
      set({ authUser: res.data.user || res.data });
    } catch (error) {
      console.log("L·ªói ki·ªÉm tra auth:", error.message);
      set({ authUser: null });
      localStorage.removeItem("authToken"); // X√≥a token n·∫øu kh√¥ng h·ª£p l·ªá
    } finally {
      set({ isCheckingAuth: false });
    }
  },

  sendSignupOTP: async (phone, navigate) => {
    set({ isSendingOTP: true });
    try {
      const formattedPhone = `+84${phone.replace(/^0/, "")}`;
      const res = await axiosInstance.post("/auth/send-otp", { phone: formattedPhone });
      set((state) => ({
        tempSignupData: {
          ...state.tempSignupData,
          phone: formattedPhone,
        },
      }));
      toast.success(res.data.message || "ƒê√£ g·ª≠i OTP th√†nh c√¥ng");
      navigate("/verify-otp");
    } catch (error) {
      const errorMessage = error.response?.data?.message || "Kh√¥ng th·ªÉ g·ª≠i OTP.";
      toast.error(errorMessage);
    } finally {
      set({ isSendingOTP: false });
    }
  },

  signup: async (data, navigate) => {
    set({ isSigningUp: true });
    try {
      const res = await axiosInstance.post("/auth/verify-signup", data);
      // Ki·ªÉm tra v√† l∆∞u token n·∫øu c√≥
      if (res.data.token) {
        localStorage.setItem("authToken", res.data.token);
        set({ authUser: res.data.user });
      } else {
        set({ authUser: null });
      }
      set({ tempSignupData: null });
      toast.success("T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng! Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ti·∫øp t·ª•c.");
      navigate("/login");
    } catch (error) {
      const errorMessage = error.response?.data?.message || "Kh√¥ng th·ªÉ ƒëƒÉng k√Ω.";
      toast.error(errorMessage);
    } finally {
      set({ isSigningUp: false });
    }
  },

  storeTempSignupData: (data) => {
    set({ tempSignupData: data });
  },

  login: async (data) => {
    set({ isLoggingIn: true });
    try {
      const formattedData = {
        ...data,
        phone: data.phone.startsWith("+") ? data.phone : `+84${data.phone.replace(/^0/, "")}`,
      };
      const res = await axiosInstance.post("/auth/login", formattedData);
      console.log("Login response:", res.data); // Debug ph·∫£n h·ªìi t·ª´ backend
      // L∆∞u token v√† c·∫≠p nh·∫≠t authUser
      if (res.data.token) {
        localStorage.setItem("authToken", res.data.token);
      } else {
        console.warn("Backend kh√¥ng tr·∫£ v·ªÅ token!");
      }
      set({ authUser: res.data.user || res.data });
      toast.success("ƒêƒÉng nh·∫≠p th√†nh c√¥ng");
    } catch (error) {
      toast.error(error.response?.data?.message || "ƒêƒÉng nh·∫≠p th·∫•t b·∫°i");
    } finally {
      set({ isLoggingIn: false });
    }
  },

  logout: async () => {
    try {
      await axiosInstance.post("/auth/logout");
      localStorage.removeItem("authToken");
      set({ authUser: null });
      toast.success("ƒêƒÉng xu·∫•t th√†nh c√¥ng");
    } catch (error) {
      toast.error(error.response?.data?.message || "L·ªói khi ƒëƒÉng xu·∫•t");
    }
  },

  updateProfile: async (data) => {
    set({ isUpdatingProfile: true });
    try {
      const res = await axiosInstance.put("/auth/update-profile", data);
      set({ authUser: res.data });
      toast.success("C·∫≠p nh·∫≠t h·ªì s∆° th√†nh c√¥ng");
    } catch (error) {
      const errorMessage = error.response?.data?.message || "L·ªói khi c·∫≠p nh·∫≠t h·ªì s∆°";
      toast.error(errorMessage);
    } finally {
      set({ isUpdatingProfile: false });
    }
  },

  // üìå G·ª≠i OTP cho forgot password
  sendForgotOTP: async (phone) => {
    set({ isSendingOTP: true });
    try {
      const res = await axiosInstance.post("/auth/send-forgot-otp", { phone }); // Kh√¥ng format l·∫°i
      toast.success(res.data.message || "ƒê√£ g·ª≠i OTP qu√™n m·∫≠t kh·∫©u");
    } catch (error) {
      console.error("L·ªói g·ª≠i OTP: ", error);
      toast.error(error.response?.data?.message || "Kh√¥ng th·ªÉ g·ª≠i OTP");
    } finally {
      set({ isSendingOTP: false });
    }
  },
  
  
  

  // üìå X√°c minh OTP ƒë·ªÉ nh·∫≠n reset token
  verifyForgotOTP: async (phone, code) => {
    try {
      const res = await axiosInstance.post("/auth/verify-otp", { phone, code });
      set({ tempResetToken: res.data.resetToken  }); // l∆∞u resetToken t·∫°m
      toast.success("OTP h·ª£p l·ªá. Nh·∫≠p m·∫≠t kh·∫©u m·ªõi.");
    } catch (error) {
      toast.error(error.response?.data?.message || "X√°c minh OTP th·∫•t b·∫°i");
    }
  },

  // üìå ƒê·ªïi m·∫≠t kh·∫©u m·ªõi
  resetPassword: async (newPassword, confirmPassword, navigate) => {
    try {
      if (newPassword !== confirmPassword) {
        toast.error("M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp");
        return;
      }

      const { tempResetToken } = useAuthStore.getState(); // l·∫•y resetToken
      console.log("Sending reset with token:", tempResetToken);

      if (!tempResetToken) {
        toast.error("Thi·∫øu token reset");
        return;
      }

      await axiosInstance.post("/auth/reset-password", {
        resetToken: tempResetToken,
        newPassword,
      });

      toast.success("ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng. H√£y ƒëƒÉng nh·∫≠p l·∫°i.");
      set({ tempResetToken: null });
      navigate("/login");
    } catch (error) {
      toast.error(error.response?.data?.message || "L·ªói khi ƒë·ªïi m·∫≠t kh·∫©u");
    }
  },
  //doi mat khau trong profile
  changePassword: async ({ currentPassword, newPassword, confirmPassword }) => {
    try {
      const response = await axiosInstance.put('/auth/change-password', {
        currentPassword,
        newPassword,
        confirmPassword,
      });

      if (response.status === 200) {
        return { success: true, message: response.data.message || "M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi th√†nh c√¥ng!" };
      } else {
        return { success: false, message: response.data.message || "ƒê·ªïi m·∫≠t kh·∫©u th·∫•t b·∫°i" };
      }
    } catch (error) {
      console.error("Change password failed:", error);
      return { success: false, message: error.response?.data?.message || "L·ªói h·ªá th·ªëng" };
    }
  },
  //find user
  findOneUser: async (identifier) => {
    try {
      const res = await axiosInstance.post("/auth/find-user-by-phone", {
        phone: identifier,
      });
      return res.data;
    } catch (error) {
      console.error("Error in findOneUser:", error);
      const errorMessage = error.response?.data?.message || "Kh√¥ng th·ªÉ t√¨m th·∫•y ng∆∞·ªùi d√πng.";
      toast.error(errorMessage);
      throw new Error(errorMessage);
    }
  }
  
}));

export default useAuthStore;